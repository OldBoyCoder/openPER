@using openPER.ViewModels
@using System.Drawing
@model openPER.ViewModels.DrawingsViewModel

@{
    ViewData["Title"] = "Index";
}
@await Html.PartialAsync("_Breadcrumb", Model.Navigation)
<div class="container-fluid">
    <div class="row">
        <div class="col-lg-12 col-md-12 col-sm-12 col-12">
            <div class="btn-toolbar" role="toolbar">
                <div class="btn-group mr-2" role="group">
                    @if (Model.TableData.CurrentDrawing > 0)
                    {
                        var d = Model.Drawings[Model.TableData.CurrentDrawing - 1];
                        @Html.ActionLink("<<", "Detail", "Drawings", new {d.MakeCode, d.SubMakeCode, d.ModelCode, d.CatalogueCode, d.GroupCode, d.SubGroupCode, d.SubSubGroupCode, DrawingNumber= Model.TableData.CurrentDrawing - 1, Model.Scope, MVS=Model.Navigation.Filter.Mvs, VIN=Model.Navigation.Filter.Vin }, new {@class="btn btn-secondary"})

                    }
                    else
                    {
                        @Html.ActionLink("<<", "Detail", "Drawings", new {}, new {@class="btn disabled btn-secondary"})

                    }
                    <button type="button" class="btn btn-secondary">@(Model.TableData.CurrentDrawing+1) / @Model.Drawings.Count</button>
                    @if (Model.TableData.CurrentDrawing < Model.Drawings.Count - 1)
                    {
                        var d = Model.Drawings[Model.TableData.CurrentDrawing + 1];
                        @Html.ActionLink(">>", "Detail", "Drawings", new {d.MakeCode, d.SubMakeCode, d.ModelCode, d.CatalogueCode, d.GroupCode, d.SubGroupCode, d.SubSubGroupCode, DrawingNumber= Model.TableData.CurrentDrawing + 1, Model.Scope, MVS=Model.Navigation.Filter.Mvs, VIN=Model.Navigation.Filter.Vin }, new {@class="btn btn-secondary"})
                    }
                    else
                    {
                        @Html.ActionLink(">>", "Detail", "Drawings", new {}, new {@class="btn disabled btn-secondary"})

                    }
                </div>
                <div class="btn-group mr-2" role="group">
                    <div class="dropdown show">
                        <a class="btn btn-secondary dropdown-toggle" href="#" role="button" id="subGroupMenuLink" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            @($"{Model.Drawings[Model.TableData.CurrentDrawing].GroupCode:000}{Model.Drawings[Model.TableData.CurrentDrawing].SubGroupCode:00}/{Model.Drawings[Model.TableData.CurrentDrawing].SubSubGroupCode:00} - {Model.Drawings[Model.TableData.CurrentDrawing].Description}")
                        </a>
                        <div class="dropdown-menu" aria-labelledby="subGroupMenuLink">
                            @{
                                @foreach (var drawing in Model.Drawings.GroupBy(x => new { x.MakeCode, x.SubMakeCode, x.ModelCode, x.CatalogueCode, x.GroupCode, x.SubGroupCode, x.SubSubGroupCode, x.Description }, (key, group) => new { key.MakeCode, key.SubMakeCode, key.ModelCode, key.CatalogueCode, key.GroupCode, key.SubGroupCode, key.SubSubGroupCode, key.Description }))
                                {
                                    var index = Model.Drawings.FindIndex(x => x.CatalogueCode == drawing.CatalogueCode && x.GroupCode == drawing.GroupCode
                                    && x.SubGroupCode == drawing.SubGroupCode && x.SubSubGroupCode == drawing.SubSubGroupCode);
                                    @Html.ActionLink($"{drawing.GroupCode:000}{drawing.SubGroupCode:00}/{drawing.SubSubGroupCode:00} - {drawing.Description}", "Detail", "Drawings", new {drawing.MakeCode, drawing.SubMakeCode, drawing.ModelCode, drawing.CatalogueCode, drawing.GroupCode, drawing.SubGroupCode, drawing.SubSubGroupCode, DrawingNumber= index, Model.Scope, MVS=Model.Navigation.Filter.Mvs, VIN=Model.Navigation.Filter.Vin }, new {@class="dropdown-item"})
                                }
                            }
                        </div>
                    </div>
                </div>
                <div class="dropdown show">
                    <a class="btn btn-secondary dropdown-toggle" href="#" role="button" id="variantMenuLink" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        @($"{Model.Drawings[Model.TableData.CurrentDrawing].Variant} {Model.Drawings[Model.TableData.CurrentDrawing].VariantPattern}")
                    </a>
                    <div class="dropdown-menu" aria-labelledby="variantMenuLink">
                        @{
                            var currentDrawing = Model.Drawings[Model.TableData.CurrentDrawing];
                            var ix = 0;
                            var usedVariants = new List<int>();
                            @foreach (var drawing in Model.Drawings)
                            {
                                // Only include variants for current sub sub group
                                if (drawing.GroupCode == currentDrawing.GroupCode && drawing.SubGroupCode == currentDrawing.SubGroupCode && drawing.SubSubGroupCode == currentDrawing.SubSubGroupCode)
                                {
                                    if (!usedVariants.Contains(drawing.Variant))
                                    {
                                        @Html.ActionLink($"{drawing.Variant} {drawing.VariantPattern}", "Detail", "Drawings", new {drawing.MakeCode, drawing.SubMakeCode, drawing.ModelCode, drawing.CatalogueCode, drawing.GroupCode, drawing.SubGroupCode, drawing.SubSubGroupCode, DrawingNumber = ix, Model.Scope, MVS=Model.Navigation.Filter.Mvs, VIN=Model.Navigation.Filter.Vin }, new {@class="dropdown-item"})
                                        usedVariants.Add(drawing.Variant);
                                    }
                                }
                                ix++;
                            }
                        }
                    </div>
                </div>
                <div class="dropdown show">
                    <a class="btn btn-secondary dropdown-toggle" href="#" role="button" id="revisionMenuLink" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        @($"{Model.Drawings[Model.TableData.CurrentDrawing].Revision} ({Model.Drawings[Model.TableData.CurrentDrawing].RevisionModifications})")
                    </a>
                    <div class="dropdown-menu" aria-labelledby="revisionMenuLink">
                        @{
                            ix = 0;
                            @foreach (var drawing in Model.Drawings)
                            {
                                // Only include revisions for current sub sub group and variant
                                if (drawing.GroupCode == currentDrawing.GroupCode && drawing.SubGroupCode == currentDrawing.SubGroupCode && drawing.SubSubGroupCode == currentDrawing.SubSubGroupCode && drawing.Variant == currentDrawing.Variant)
                                    @Html.ActionLink($"{drawing.Revision} ({drawing.RevisionModifications})", "Detail", "Drawings", new {drawing.MakeCode, drawing.SubMakeCode, drawing.ModelCode, drawing.CatalogueCode, drawing.GroupCode, drawing.SubGroupCode, drawing.SubSubGroupCode, DrawingNumber = ix, Model.Scope }, new {@class="dropdown-item"})
                                ix++;
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-5 col-md-12 col-sm-12 col-12">
            <div class="container-fluid">
                <div class="row">
                    <div class="col-12">
                        <div style="position: relative">
                            <img class="img-fluid" src="@Model.TableData.ImagePath" alt="">
                            @foreach (var h in Model.TableData.HotSpots.Values)
                            {

                                <img src="~/SiteImages/HotSpot1x1.png" data-bs-toggle="tooltip" data-bs-placement="auto" data-bs-html="true" data-bs-title="@(h.TooltipText)" style="@(h.PositionHtml)">
                            }
                            @foreach (var h in Model.TableData.Links)
                            {
                                <a href="@Url.Action("Detail", "Drawings", new { language=Model.Navigation.Language,Model.Navigation.Breadcrumb.MakeCode, Model.Navigation.Breadcrumb.SubMakeCode, Model.Navigation.Breadcrumb.ModelCode, Model.Navigation.Breadcrumb.CatalogueCode, GroupCode=h.LinkGroupCode, SubGroupCode=h.LinkSubGroupCode, SubSubGroupCode=h.LinkSubSubGroupCode, DrawingNumber=0, Scope="SubSubGroup", VIN=Model.Navigation.Filter.Vin, MVS=Model.Navigation.Filter.Mvs  })">
                                    <img src="~/SiteImages/HotSpot1x1.png" data-bs-toggle="tooltip" data-bs-placement="auto" data-bs-html="true" data-bs-title="@(h.TooltipText)" style="@(h.PositionHtml)">
                                </a>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-7 col-md-12 col-sm-12 col-12">
            <table class="table table-sm">
                <tr><th>code</th><th>Prod. code</th><th>Description</th><th>Compat.</th><th>Modif.</th><th>Qty</th><th>Notes</th><th>Components</th><th>Colour</th></tr>
                @{

                    var cls = "table-secondary";
                    var lastCode = 0;
                    @foreach (var item in Model.TableData.Parts)
                    {
                        @if (lastCode != item.TableOrder)
                        {
                            cls = cls == "table-secondary" ? "table-default" : "table-secondary";
                            lastCode = item.TableOrder;
                        }

                        <tr class="@cls @(Model.TableData.HighlightPart == item.PartNumber ? "table-info":"")">

                            <td>
                                @Html.DisplayFor(model => item.TableOrder)
                            </td>
                            <td align="right">
                                @if (!item.Visible)
                                {
                                    <del>
                                        <a href="@Url.Action("SearchPartByPartNumber", "Part", new {Model.Navigation.Language, item.PartNumber })">@Html.DisplayFor(model => item.PartNumber)</a> @Html.Raw(item.SearchLink(Model.Navigation.Breadcrumb.MakeDescription))
                                    </del>
                                }
                                else
                                {
                                    <a href="@Url.Action("SearchPartByPartNumber", "Part", new {Model.Navigation.Language, item.PartNumber })">@Html.DisplayFor(model => item.PartNumber)</a> @Html.Raw(item.SearchLink(Model.Navigation.Breadcrumb.MakeDescription))
                                }

                            </td>
                            <td>
                                @if (!item.Visible)
                                {
                                    <del>
                                        @Html.DisplayFor(model => item.FullDescription)
                                    </del>
                                }
                                else
                                {
                                    @Html.DisplayFor(model => item.FullDescription)
                                }
                            </td>

                            <td><span data-bs-toggle="tooltip" data-bs-placement="auto" title="@item.CompatibilityTooltip" data-bs-html="true">@item.Compatibility</span></td>
                            <td>
                                <ul>
                                    @foreach (var mod in item.Modifications)
                                    {
                                        <li data-bs-toggle="tooltip" data-bs-placement="auto" data-bs-title="@mod.FullDescription">@Html.DisplayFor(model => mod.Type)@Html.DisplayFor(model => mod.Code)</li>
                                    }
                                </ul>
                            </td>
                            <td>@Html.DisplayFor(model => item.Quantity)</td>
                            <td>@Html.DisplayFor(model => item.Notes)</td>
                            <td>
                                @if (item.IsAComponent)
                                {
                                    @Html.ActionLink("Go", "Detail", "Cliche", new {Model.Navigation.Language, Model.TableData.MakeCode, Model.TableData.SubMakeCode, Model.TableData.ModelCode, Model.TableData.CatalogueCode, Model.TableData.GroupCode, Model.TableData.SubGroupCode, Model.TableData.SubSubGroupCode, DrawingNumber = Model.TableData.CurrentDrawing, Model.Scope, ClichePartNumber = item.PartNumber, ClicheDrawingNumber = 1, VIN=Model.Navigation.Filter.Vin, MVS=Model.Navigation.Filter.Mvs })
                                }
                            </td>
                            <td>

                                @foreach (var colour in item.Colours)
                                {
                                    var code = colour.Code.Replace("/", "-");
                                    <button type="button" data-bs-toggle="modal" data-bs-target="#colour@(code)">@colour.Code </button>
                                }
                            </td>

                        </tr>
                    }
                }
            </table>
            @if (Model.TableData.Links.Count > 0)
            {
                <h5>Linked diagrams</h5>
                <table class="table-sm">
                    <tr><th>Table code</th><th>Description</th></tr>
                    @foreach (var h in Model.TableData.Links)
                    {
                        <tr>
                            <td>
                                <a href="@Url.Action("Detail", "Drawings", new { language = Model.Navigation.Language, Model.Navigation.Breadcrumb.MakeCode, Model.Navigation.Breadcrumb.SubMakeCode, Model.Navigation.Breadcrumb.ModelCode, Model.Navigation.Breadcrumb.CatalogueCode, GroupCode = h.LinkGroupCode, SubGroupCode = h.LinkSubGroupCode, SubSubGroupCode = h.LinkSubSubGroupCode, DrawingNumber = 0, Scope = "SubSubGroup", VIN = Model.Navigation.Filter.Vin, MVS = Model.Navigation.Filter.Mvs })">
                                    <img src="~/SiteImages/HotSpot1x1.png" data-bs-toggle="tooltip" data-bs-placement="auto" data-bs-html="true" data-bs-title="@(h.TooltipText)" style="@(h.PositionHtml)">@h.Link
                                </a>
                            </td>
                            <td>@h.LinkDescription</td>
                        </tr>

                    }
                </table>

            }
        </div>
    </div>
    <div class="row">
        <div class="col-12">
            <div class="container-fluid horizontal-scrollable">
                <div class="row flex-nowrap text-center">
                    @{
                        ix = 0;
                        @foreach (var drawing in Model.Drawings)
                        {
                            <div class="col-xs-4 @(Model.TableData.CurrentDrawing == ix ? "border" : "")">
                                <figure class="figure">
                                    <img alt="An image of parts" class="figure-img img-fluid" src="@drawing.ThumbImagePath">
                                    <figcaption class="figure-caption">
                                        @Html.ActionLink($"{drawing.GroupCode:000}{drawing.SubGroupCode:00}/{drawing.SubSubGroupCode:00} - {drawing.Description} (Var.:{drawing.Variant}/Rev.:{drawing.Revision})", "Detail", "Drawings", new { drawing.MakeCode, drawing.SubMakeCode, drawing.ModelCode, drawing.CatalogueCode, drawing.GroupCode, drawing.SubGroupCode, drawing.SubSubGroupCode, DrawingNumber = ix++, Model.Scope, MVS = Model.Navigation.Filter.Mvs, VIN = Model.Navigation.Filter.Vin })
                                    </figcaption>
                                </figure>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
    @{
        var allColours = new Dictionary<string, ColourViewModel>();
        foreach (var part in Model.TableData.Parts)
        {
            foreach (var colour in part.Colours)
            {
                if (!allColours.ContainsKey(colour.Code))
                {
                    allColours.Add(colour.Code, colour);
                    var code = colour.Code.Replace("/", "-");
                    <div class="modal" tabindex="-1" role="dialog" id="colour@(code)">
                        <div class="modal-dialog" role="document">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title">Colour information @colour.Code</h5>
                                    <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                                        <span aria-hidden="true">&times;</span>
                                    </button>
                                </div>
                                <div class="modal-body">
                                    <p>@colour.Code</p>
                                    <p>@colour.Description</p>
                                    @if (colour.ImagePath != "")
                                    {
                                        <img alt="Illustration of colour @colour.Description" src="@colour.ImagePath" />
                                    }
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Close</button>
                                </div>
                            </div>
                        </div>
                    </div>

                }
            }
        }

    }
</div>


